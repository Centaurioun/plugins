using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.IO;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Xml.Linq;
using Nikse.SubtitleEdit.PluginLogic.Logic;

namespace Nikse.SubtitleEdit.PluginLogic
{
    public partial class PluginForm : Form
    {
        public string FixedSubtitle { get; set; }
        private Subtitle _subtitle1;
        private Subtitle _subtitle2;
        private int _selectedIndex = -1;
        private readonly Timer _previewTimer = new Timer();

        public PluginForm()
        {
            InitializeComponent();
        }

        public PluginForm(Subtitle subtitle, string name, string description, Form parentForm)
            : this()
        {
            _subtitle1 = subtitle;
            subtitleListView1.InitializeLanguage();
            subtitleListView1.MultiSelect = false;
//            subtitleListView1.ShowAlternateTextColumn("Line width");

            LoadSettingsIfThereIs();
            subtitleListView1.Fill(subtitle);
            if (subtitle.Paragraphs.Count > 0)
                subtitleListView1.SelectIndexAndEnsureVisible(0);

            _previewTimer.Interval = 200;
            _previewTimer.Tick += PreviewTimerTick;
        }

        private void LoadSettingsIfThereIs()
        {
            var fileName = GetSettingsFileName();
            if (File.Exists(fileName))
            {
                XDocument doc = XDocument.Parse(File.ReadAllText(fileName));
                
//                string fontName = doc.Root.Element("FontName").Value;
            }            
        }
      
        private string GetSettingsFileName()
        {
            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase);
            if (path.StartsWith("file:\\"))
                path = path.Remove(0, 6);
            path = Path.Combine(path, "Plugins");
            if (!Directory.Exists(path))
                path = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Subtitle Edit"), "Plugins");
            return Path.Combine(path, "MergeTwoSrtToAss.xml");
        }

        private void buttonCancel_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.Cancel;
        }

        private void buttonOK_Click(object sender, EventArgs e)
        {
            FixedSubtitle = _subtitle1.ToText(new SubRip());
            DialogResult = DialogResult.OK;
        }

        private void PluginForm_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
                DialogResult = DialogResult.Cancel;
        }

  
        private void subtitleListView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (subtitleListView1.SelectedItems.Count == 0)
                return;

            _selectedIndex = subtitleListView1.SelectedItems[0].Index;
            Paragraph p = _subtitle1.GetParagraphOrDefault(_selectedIndex);
            if (p != null)
            {
                //TODO: show preview
            }
        }

        private void PluginForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
            var fileName = GetSettingsFileName();
                var document = new XDocument(
                    new XDeclaration("1.0", "utf8", "yes"),
                    new XComment("This XML file defines the settings for the Subtitle Edit CheckLineWidth plugin"),
                    new XComment("XML file generated by CheckLineWidth plugin"),
                    new XElement("CheckLineWidthSettings",
                        new XElement("FontName", "asfd"),
                        new XElement("FontSize", "sdf")
                    )
                );
                document.Save(fileName);
            }
            catch
            { 
            }
        }

        private void buttonOpenFile1_Click(object sender, EventArgs e)
        {
            openFileDialogSubtitle.Title = "Open subtitle file 1";
            openFileDialogSubtitle.Filter = "Subrip files|*.srt";
            openFileDialogSubtitle.FileName = string.Empty;
            if (openFileDialogSubtitle.ShowDialog(this) == DialogResult.OK)
            {
                var lines = new List<string>();
                foreach (var line in File.ReadAllLines(openFileDialogSubtitle.FileName))
                {
                    lines.Add(line);
                }
                var subRip = new SubRip();
                if (subRip.IsMine(lines, openFileDialogSubtitle.FileName))
                {
                    _subtitle1 = new Subtitle();
                    subRip.LoadSubtitle(_subtitle1, lines, openFileDialogSubtitle.FileName);
                    subtitleListView2.Fill(_subtitle1);
                    if (_subtitle1.Paragraphs.Count > 0)
                        subtitleListView1.SelectIndexAndEnsureVisible(0);
                }
            }
        }

        private void buttonOpenFile2_Click(object sender, EventArgs e)
        {
            openFileDialogSubtitle.Title = "Open subtitle file 2";
            openFileDialogSubtitle.Filter = "Subrip files|*.srt";
            openFileDialogSubtitle.FileName = string.Empty;
            if (openFileDialogSubtitle.ShowDialog(this) == DialogResult.OK)
            {
                var lines = new List<string>();
                foreach (var line in File.ReadAllLines(openFileDialogSubtitle.FileName))
                {
                    lines.Add(line);
                }
                var subRip = new SubRip();
                if (subRip.IsMine(lines, openFileDialogSubtitle.FileName))
                {
                    _subtitle2 = new Subtitle();
                    subRip.LoadSubtitle(_subtitle2, lines, openFileDialogSubtitle.FileName);
                    subtitleListView2.Fill(_subtitle2);
                    if (_subtitle2.Paragraphs.Count > 0)
                        subtitleListView1.SelectIndexAndEnsureVisible(0);
                }
            }
        }

        private void PreviewTimerTick(object sender, EventArgs e)
        {
            _previewTimer.Stop();
            GeneratePreviewReal();
        }

        protected void GeneratePreviewReal()
        {
            if (pictureBoxPreview.Image != null)
                pictureBoxPreview.Image.Dispose();
            var bmp = new Bitmap(pictureBoxPreview.Width, pictureBoxPreview.Height);

            using (Graphics g = Graphics.FromImage(bmp))
            {

                // Draw background
                const int rectangleSize = 9;
                for (int y = 0; y < bmp.Height; y += rectangleSize)
                {
                    for (int x = 0; x < bmp.Width; x += rectangleSize)
                    {
                        Color c = Color.WhiteSmoke;
                        if (y % (rectangleSize * 2) == 0)
                        {
                            if (x % (rectangleSize * 2) == 0)
                                c = Color.LightGray;
                        }
                        else
                        {
                            if (x % (rectangleSize * 2) != 0)
                                c = Color.LightGray;
                        }
                        g.FillRectangle(new SolidBrush(c), x, y, rectangleSize, rectangleSize);
                    }
                }

                // Draw text
                Font font;
                try
                {
                    font = new Font(comboBoxFontName1.Text, (float)numericUpDownFontSize1.Value);
                }
                catch
                {
                    font = new Font(Font, FontStyle.Regular);
                }
                g.TextRenderingHint = TextRenderingHint.AntiAlias;
                g.SmoothingMode = SmoothingMode.AntiAlias;
                var sf = new StringFormat { Alignment = StringAlignment.Near, LineAlignment = StringAlignment.Near };
                var path = new GraphicsPath();

                bool newLine = false;
                var sb = new StringBuilder();
                sb.Append("This is a test!");

                var measuredWidth = TextDraw.MeasureTextWidth(font, sb.ToString(), checkBoxFontBold1.Checked) + 1;
                var measuredHeight = TextDraw.MeasureTextHeight(font, sb.ToString(), checkBoxFontBold1.Checked) + 1;

                float left = 2;
                //if (radioButtonTopLeft.Checked || radioButtonMiddleLeft.Checked || radioButtonBottomLeft.Checked)
                //    left = (float)numericUpDownMarginLeft.Value;
                //else if (radioButtonTopRight.Checked || radioButtonMiddleRight.Checked || radioButtonBottomRight.Checked)
                //    left = bmp.Width - (measuredWidth + ((float)numericUpDownMarginRight.Value));
                //else
                //    left = ((float)(bmp.Width - measuredWidth * 0.8 + 15) / 2);

                float top = 5;
                //if (radioButtonTopLeft.Checked || radioButtonTopCenter.Checked || radioButtonTopRight.Checked)
                //    top = (float)numericUpDownMarginVertical.Value;
                //else if (radioButtonMiddleLeft.Checked || radioButtonMiddleCenter.Checked || radioButtonMiddleRight.Checked)
                //    top = (bmp.Height - measuredHeight) / 2;
                //else
                //    top = bmp.Height - measuredHeight - ((int)numericUpDownMarginVertical.Value);
                //top -= (int)numericUpDownShadowWidth.Value;
                //if (radioButtonTopCenter.Checked || radioButtonMiddleCenter.Checked || radioButtonBottomCenter.Checked)
                //    left -= (int)(numericUpDownShadowWidth.Value / 2);

                const int leftMargin = 0;
                int pathPointsStart = -1;

                if (false) //radioButtonOpaqueBox.Checked)
                {
                    g.FillRectangle(new SolidBrush(panelOutlineColor1.BackColor), left, top, measuredWidth + 3, measuredHeight + 3);
                }

                TextDraw.DrawText(font, sf, path, sb, checkBoxFontItalic1.Checked, checkBoxFontBold1.Checked, checkBoxFontUnderline1.Checked, left, top, ref newLine, leftMargin, ref pathPointsStart);

                int outline = (int)numericUpDownOutline1.Value;

                // draw shadow
                if (numericUpDownShadowWidth1.Value > 0) // && radioButtonOutline1.Checked)
                {
                    var shadowPath = (GraphicsPath)path.Clone();
                    for (int i = 0; i < (int)numericUpDownShadowWidth1.Value; i++)
                    {
                        var translateMatrix = new Matrix();
                        translateMatrix.Translate(1, 1);
                        shadowPath.Transform(translateMatrix);

                        var p1 = new Pen(Color.FromArgb(250, Color.Black), outline); //(()) panelBackColor.BackColor), outline);
                        g.DrawPath(p1, shadowPath);
                        p1.Dispose();
                    }
                }

                if (outline > 0)
                {
                    g.DrawPath(new Pen(panelOutlineColor1.BackColor, outline), path);
                }
                g.FillPath(new SolidBrush(panelPrimaryColor1.BackColor), path);

            }
            pictureBoxPreview.Image = bmp;
        }


    }
}